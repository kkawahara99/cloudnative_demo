AWSTemplateFormatVersion: 2010-09-09
Description: Create VPC Network

Parameters:
  SystemName:
    Description: System name.
    Type: String
  EnvName:
    Description: Environmental name.
    Type: String
    AllowedValues: [dev, stg, prod]
  SgIdCloud9:
    Description: Security group generated by Cloud9.
    Type: String
  PriIPCloud9:
    Description: Private IP Address generated by Cloud9.
    Type: String

Resources:
# ------------------------------------------------------- #
# Security Group
# ------------------------------------------------------- #
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: HTTPS for Cloud9
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SgIdCloud9
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SecurityGroupContainer
          Description: HTTP for Container App
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${EnvName}-sg-vpce
  SecurityGroupContainer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group of VPC Container App
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-sg-ingress-id" }
          Description: HTTP for Ingress
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SgIdCloud9
          Description: HTTP for Cloud9
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref SgIdCloud9
          Description: HTTP for Cloud9
      Tags:
      - Key: Name
        Value: !Sub ${SystemName}-${EnvName}-sg-container
  InboundRuleManagement:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-sg-ingress-id" }
      IpProtocol: tcp
      FromPort: 10080
      ToPort: 10080
      CidrIp: !Sub ${PriIPCloud9}/32
      Description: HTTP internal for Cloud9
# ------------------------------------------------------- #
# VPC Endpoint
# ------------------------------------------------------- #
  InterfaceEndpointECRAPI:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SubnetIds:
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-a-id" }
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-c-id" }
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
  InterfaceEndpointECRDKR:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SubnetIds: 
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-a-id" }
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-c-id" }
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
  InterfaceEndpointLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SubnetIds: 
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-a-id" }
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-c-id" }
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
  InterfaceEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      SubnetIds: 
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-a-id" }
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-subnet-private-egress-c-id" }
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      VpcEndpointType: Interface
  GatewayEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-vpc-id" }
      RouteTableIds:
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-route-app-id" }
        - { "Fn::ImportValue": !Sub "${SystemName}-${EnvName}-route-management-id" }
      VpcEndpointType: Gateway

Outputs:
# SecurityGroup
  VPCEndpointSecurityGroup:
    Value: !Ref VPCEndpointSecurityGroup
    Export:
      Name: !Sub ${SystemName}-${EnvName}-sg-vpce-id
  SecurityGroupContainer:
    Value: !Ref SecurityGroupContainer
    Export:
      Name: !Sub ${SystemName}-${EnvName}-sg-container-id